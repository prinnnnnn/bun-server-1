// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               Int        @id @default(autoincrement())
    email            String     @unique
    password         String
    firstName        String?
    lastName         String?
    profilePath      String?
    bio              String?
    coverPhotoUrl    String?
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
    posts            Post[]
    likedPosts       PostLike[]
    Comment          Comment[]
    Follower         Follower[] @relation("Followers")
    Following        Follower[] @relation("Following")
    sentMessages     Message[]  @relation("MessageSender")
    receivedMessages Message[]  @relation("MessageRecipient")
}

model Post {
    id        Int        @id @default(autoincrement())
    content   String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    imageUrl  String?
    author    User       @relation(fields: [authorId], references: [id])
    authorId  Int
    likes     PostLike[]
    Comment   Comment[]
}

model PostLike {
    id     Int  @id @default(autoincrement())
    user   User @relation(fields: [userId], references: [id])
    userId Int
    post   Post @relation(fields: [postId], references: [id])
    postId Int
}

model Comment {
    id        Int      @id @default(autoincrement())
    content   String
    createdAt DateTime @default(now())
    author    User     @relation(fields: [authorId], references: [id])
    authorId  Int
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
}

model Follower {
    id          Int  @id @default(autoincrement())
    follower    User @relation("Followers", fields: [followerId], references: [id])
    followerId  Int
    following   User @relation("Following", fields: [followingId], references: [id])
    followingId Int
}

// model Notification {
//     id          Int      @id @default(autoincrement())
//     content     String
//     createdAt   DateTime @default(now())
//     recipient   User     @relation(fields: [recipientId], references: [id])
//     recipientId Int
//     read        Boolean  @default(false)
// }

model Message {
    id          Int      @id @default(autoincrement())
    content     String
    createdAt   DateTime @default(now())
    sender      User     @relation("MessageSender", fields: [senderId], references: [id])
    senderId    Int
    recipient   User     @relation("MessageRecipient", fields: [recipientId], references: [id])
    recipientId Int
}
